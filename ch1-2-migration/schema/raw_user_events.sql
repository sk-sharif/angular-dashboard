DROP TABLE IF EXISTS addotnet.raw_user_events_new;
CREATE TABLE addotnet.raw_user_events_new
(
    kafka_dt             Date,
    kafka_hour           Int16,
    dt_utc               Date,
    dt                   Date,
    `date`               Nullable(String),
    event_time           Nullable(timestamp),
    epoch                Nullable(BIGINT),
    event_name           Nullable(String),
    user_id              Nullable(String),
    source_url           Nullable(String),
    sid                  String,
    said                 String,
    keyword              Nullable(String),
    adgroup_id           Nullable(String),
    action_worth         Nullable(DOUBLE),
    ip                   Nullable(String),
    ua                   Nullable(String),
    referrer_domain      Nullable(String),
    ads_returned         Nullable(DOUBLE),
    country_name         Nullable(String),
    country_iso_code     Nullable(String),
    click_id             Nullable(String),
    data_source          Nullable(String),
    external_referrer    Nullable(String),
    push_user_id         Nullable(String),
    impression_id        Nullable(String),
    keyword_rank         Nullable(DOUBLE),
    ad_unit_name         Nullable(String),
    event_uuid           Nullable(String),
    dst_url              Nullable(String),
    error_message        Nullable(String),
    js_version           Nullable(String),
    ext_version          Nullable(String),
    ad_unit_updated_type Nullable(String),
    ad_unit_updated_by   Nullable(String),
    ad_unit_old_version  Nullable(String),
    ad_unit_new_version  Nullable(String),
    partition_time       Nullable(BIGINT),
    ad_unit_version      Nullable(String),
    affiliate_id         Nullable(String),
    display_url          Nullable(String),
    pre_event_uuid       Nullable(String),
    receivetimestamp     Nullable(BIGINT),
    sub_affiliate_id     Nullable(String),
    uuid                 Nullable(String)
) ENGINE = ReplicatedMergeTree('/clickhouse/{cluster}/addotnet/prod/tables/raw_user_events_1/{shard}', '{replica}')
      PARTITION BY (kafka_dt ,kafka_hour)
      PRIMARY KEY (dt, sid, said)
      ORDER BY (dt, sid, said)
      SETTINGS index_granularity = 8192, max_parts_in_total = 100000, parts_to_throw_insert = 300;


-- Live streaming.

drop table if exists etl.da_raw_user_events_consumer;
CREATE TABLE etl.da_raw_user_events_consumer
(
    timeStamp                          Nullable(Bigint),
    eventName                          Nullable(String),
    userId                             Nullable(String),
    srcUrl                             Nullable(String),
    ip                                 Nullable(String),
    ua                                 Nullable(String),
    refererDomain                      Nullable(String),
    `eventParams.sid`                  Nullable(String),
    `eventParams.said`                 Nullable(String),
    `eventParams.kw`                   Nullable(String),
    `eventParams.actionWorth`          Nullable(Double),
    `eventParams.adnetClickId`         Nullable(String),
    `eventParams.external_referrer`    Nullable(String),
    `eventParams.push_user_id`         Nullable(String),
    `eventParams.impression_id`        Nullable(String),
    `eventParams.kw_rank`              Nullable(Double),
    `eventParams.ad_unit_name`         Nullable(String),
    `eventParams.source_url`           Nullable(String),
    `eventParams.event_uuid`           Nullable(String),
    `eventParams.country`              Nullable(String),
    `eventParams.dst_url`              Nullable(String),
    `eventParams.error`                Nullable(String),
    `eventParams.js_version`           Nullable(String),
    `eventParams.ext_version`          Nullable(String),
    `eventParams.ad_unit_updated_type` Nullable(String),
    `eventParams.ad_unit_updated_by`   Nullable(String),
    `eventParams.ad_unit_old_version`  Nullable(String),
    `eventParams.ad_unit_new_version`  Nullable(String),
    `eventParams.affiliate_id`         Nullable(String),
    `eventParams.sub_affiliate_id`     Nullable(String),
    `eventParams.pre_event_uuid`       Nullable(String),
    `eventParams.display_url`          Nullable(String),
    `eventParams.ad_unit_version`      Nullable(String),
    `eventParams.uuid`                 Nullable(String),
    `eventParams.keyword`              Nullable(String),
    `eventParams.adgroupId`            Nullable(String)
)
    ENGINE = Kafka SETTINGS
        kafka_broker_list = 'kafka1.data.int.dc1.ad.net:9092,kafka2.data.int.dc1.ad.net:9092,kafka3.data.int.dc1.ad.net:9092,kafka4.data.int.dc1.ad.net:9092,kafka5.data.int.dc1.ad.net:9092',
        kafka_topic_list = 'data_aug_user_profile_json_logs',
        kafka_group_name = 'PROD_CH_1_2_data_aug_user_profile_json_logs_g1',
        kafka_format = 'JSONEachRow',
        kafka_row_delimiter = '\n',
        kafka_skip_broken_messages = 1,
        kafka_num_consumers = 1;

DROP TABLE IF EXISTS etl.siq_raw_user_events_consumer;
CREATE TABLE etl.siq_raw_user_events_consumer
(
    timeStamp                 Nullable(Bigint),
    eventName                 Nullable(String),
    userId                    Nullable(String),
    srcUrl                    Nullable(String),
    ip                        Nullable(String),
    ua                        Nullable(String),
    refererDomain             Nullable(String),
    `eventParams.sid`         Nullable(String),
    `eventParams.said`        Nullable(String),
    `eventParams.kw`          Nullable(String),
    `eventParams.source_url`  Nullable(String),
    `eventParams.keyword`     Nullable(String),
    `eventParams.adsReturned` Nullable(DOUBLE)
)
    ENGINE = Kafka SETTINGS
        kafka_broker_list = 'kafka1.data.int.dc1.ad.net:9092,kafka2.data.int.dc1.ad.net:9092,kafka3.data.int.dc1.ad.net:9092,kafka4.data.int.dc1.ad.net:9092,kafka5.data.int.dc1.ad.net:9092',
        kafka_topic_list = 'siq_user_profile_json_logs',
        kafka_group_name = 'PROD_CH_1_2_siq_user_profile_json_logs_g1',
        kafka_format = 'JSONEachRow',
        kafka_row_delimiter = '\n',
        kafka_num_consumers = 1;

DROP TABLE IF EXISTS etl.da_raw_user_events_consumer_mat;
CREATE MATERIALIZED VIEW etl.da_raw_user_events_consumer_mat to addotnet.raw_user_events
AS
select toDate(toDateTime(_timestamp, 'America/Los_Angeles'))                       AS kafka_dt,
       toHour(toDateTime(_timestamp, 'America/Los_Angeles'))                       AS kafka_hour,
       toDateTime(CAST(timeStamp / 1000 as BIGINT), 'UTC')                         AS dt_utc,
       toDateTime(CAST(timeStamp / 1000 as BIGINT), 'UTC')                         AS dt,
       toDate(toDateTime(CAST(timeStamp / 1000 as BIGINT), 'America/Los_Angeles')) AS `date`,
       toDateTime(CAST(timeStamp / 1000 as BIGINT), 'America/Los_Angeles')         AS event_time,
       timeStamp                                                                   AS epoch,
       eventName                                                                   AS event_name,
       userId                                                                      AS user_id,
       coalesce(`eventParams.source_url`, srcUrl)                                  AS source_url,
       coalesce(`eventParams.sid`, '')                                             AS sid,
       coalesce(`eventParams.said`, '')                                            AS said,
       `eventParams.kw`                                                            AS keyword,
       `eventParams.adgroupId`                                                     AS adgroup_id,
       `eventParams.actionWorth`                                                   AS action_worth,
       ip                                                                          AS ip,
       ua                                                                          AS ua,
       refererDomain                                                               AS referrer_domain,
       CAST(0 as Nullable(DOUBLE))                                                 AS ads_returned,
       `eventParams.country`                                                       AS country_name,
       CAST(NULL AS Nullable(String))                                              AS country_iso_code,
       `eventParams.adnetClickId`                                                  AS click_id,
       CAST('DATA_AUG' AS Nullable(String))                                        AS data_source,
       `eventParams.external_referrer`                                             AS external_referrer,
       `eventParams.push_user_id`                                                  AS push_user_id,
       `eventParams.impression_id`                                                 AS impression_id,
       CAST(`eventParams.kw_rank` as Nullable(DOUBLE))                             AS keyword_rank,
       `eventParams.ad_unit_name`                                                  AS ad_unit_name,
       `eventParams.event_uuid`                                                    AS event_uuid,
       `eventParams.dst_url`                                                       AS dst_url,
       `eventParams.error`                                                         AS error_message,
       `eventParams.js_version`                                                    AS js_version,
       `eventParams.ext_version`                                                   AS ext_version,
       `eventParams.ad_unit_updated_type`                                          AS ad_unit_updated_type,
       `eventParams.ad_unit_updated_by`                                            AS ad_unit_updated_by,
       `eventParams.ad_unit_old_version`                                           AS ad_unit_old_version,
       `eventParams.ad_unit_new_version`                                           AS ad_unit_new_version,
       CAST(_timestamp as Nullable(BIGINT))                                        AS partition_time,
       `eventParams.ad_unit_version`                                               AS ad_unit_version,
       `eventParams.affiliate_id`                                                  AS affiliate_id,
       `eventParams.display_url`                                                   AS display_url,
       `eventParams.pre_event_uuid`                                                AS pre_event_uuid,
       CAST(_timestamp as Nullable(BIGINT))                                        AS receivetimestamp,
       `eventParams.sub_affiliate_id`                                              AS sub_affiliate_id,
       `eventParams.uuid`                                                          AS uuid
from etl.da_raw_user_events_consumer
    SETTINGS input_format_import_nested_json = 1;

DROP TABLE IF EXISTS etl.da_raw_user_events_presearch_kw_imp_consumer_mat;
CREATE MATERIALIZED VIEW etl.da_raw_user_events_presearch_kw_imp_consumer_mat to addotnet.raw_user_events
AS
select toDate(toDateTime(_timestamp, 'America/Los_Angeles'))                       AS kafka_dt,
       toHour(toDateTime(_timestamp, 'America/Los_Angeles'))                       AS kafka_hour,
       toDateTime(CAST(timeStamp / 1000 as BIGINT), 'UTC')                         AS dt_utc,
       toDateTime(CAST(timeStamp / 1000 as BIGINT), 'UTC')                         AS dt,
       toDate(toDateTime(CAST(timeStamp / 1000 as BIGINT), 'America/Los_Angeles')) AS `date`,
       toDateTime(CAST(timeStamp / 1000 as BIGINT), 'America/Los_Angeles')         AS event_time,
       timeStamp                                                                   AS epoch,
       'presearchKeywordImpression'                                                AS event_name,
       userId                                                                      AS user_id,
       coalesce(`eventParams.source_url`, srcUrl)                                  AS source_url,
       coalesce(`eventParams.sid`, '')                                             AS sid,
       coalesce(`eventParams.said`, '')                                            AS said,
       JSONExtractArrayRaw(coalesce(`eventParams.kw`, ''))                         AS kw_arr,
       (arrayJoin(arrayZip(kw_arr, arrayEnumerate(kw_arr))) as x).1                AS keyword_val,
       replaceAll(keyword_val, '"', '')                                            AS keyword,
       x.2                                                                         AS keyword_rank,
       `eventParams.adgroupId`                                                     AS adgroup_id,
       `eventParams.actionWorth`                                                   AS action_worth,
       ip                                                                          AS ip,
       ua                                                                          AS ua,
       refererDomain                                                               AS referrer_domain,
       CAST(0 as Nullable(DOUBLE))                                                 AS ads_returned,
       `eventParams.country`                                                       AS country_name,
       CAST(NULL AS Nullable(String))                                              AS country_iso_code,
       `eventParams.adnetClickId`                                                  AS click_id,
       CAST('DATA_AUG' AS Nullable(String))                                        AS data_source,
       `eventParams.external_referrer`                                             AS external_referrer,
       `eventParams.push_user_id`                                                  AS push_user_id,
       `eventParams.impression_id`                                                 AS impression_id,
       `eventParams.ad_unit_name`                                                  AS ad_unit_name,
       `eventParams.event_uuid`                                                    AS event_uuid,
       `eventParams.dst_url`                                                       AS dst_url,
       `eventParams.error`                                                         AS error_message,
       `eventParams.js_version`                                                    AS js_version,
       `eventParams.ext_version`                                                   AS ext_version,
       `eventParams.ad_unit_updated_type`                                          AS ad_unit_updated_type,
       `eventParams.ad_unit_updated_by`                                            AS ad_unit_updated_by,
       `eventParams.ad_unit_old_version`                                           AS ad_unit_old_version,
       `eventParams.ad_unit_new_version`                                           AS ad_unit_new_version,
       CAST(_timestamp as Nullable(BIGINT))                                        AS partition_time,
       `eventParams.ad_unit_version`                                               AS ad_unit_version,
       `eventParams.affiliate_id`                                                  AS affiliate_id,
       `eventParams.display_url`                                                   AS display_url,
       `eventParams.pre_event_uuid`                                                AS pre_event_uuid,
       CAST(_timestamp as Nullable(BIGINT))                                        AS receivetimestamp,
       `eventParams.sub_affiliate_id`                                              AS sub_affiliate_id,
       `eventParams.uuid`                                                          AS uuid
from etl.da_raw_user_events_consumer
WHERE eventName = 'presearchShown'
    SETTINGS input_format_import_nested_json = 1;

-- siq events
DROP TABLE IF EXISTS etl.siq_raw_user_events_consumer_mat;
CREATE MATERIALIZED VIEW etl.siq_raw_user_events_consumer_mat to addotnet.raw_user_events
AS
select toDate(toDateTime(_timestamp, 'America/Los_Angeles'))                       AS kafka_dt,
       toHour(toDateTime(_timestamp, 'America/Los_Angeles'))                       AS kafka_hour,
       toDateTime(CAST(timeStamp / 1000 as BIGINT), 'UTC')                         AS dt_utc,
       toDateTime(CAST(timeStamp / 1000 as BIGINT), 'UTC')                         AS dt,
       toDate(toDateTime(CAST(timeStamp / 1000 as BIGINT), 'America/Los_Angeles')) AS `date`,
       toDateTime(CAST(timeStamp / 1000 as BIGINT), 'America/Los_Angeles')         AS event_time,
       timeStamp                                                                   AS epoch,
       eventName                                                                   AS event_name,
       userId                                                                      AS user_id,
       coalesce(`eventParams.source_url`, srcUrl)                                  AS source_url,
       coalesce(`eventParams.sid`, '')                                             AS sid,
       coalesce(`eventParams.said`, '')                                            AS said,
       `eventParams.kw`                                                            AS keyword,
       ''                                                                          AS adgroup_id,
       CAST(0.0 as Nullable(DOUBLE))                                               AS action_worth,
       ip                                                                          AS ip,
       ua                                                                          AS ua,
       refererDomain                                                               AS referrer_domain,
       `eventParams.adsReturned`                                                   AS ads_returned,
       CAST('SEARCHIQ' AS Nullable(String))                                        AS data_source,
       CAST(_timestamp as Nullable(BIGINT))                                        AS partition_time,
       CAST(_timestamp as Nullable(BIGINT))                                        AS receivetimestamp
from etl.siq_raw_user_events_consumer
    SETTINGS input_format_import_nested_json = 1;
